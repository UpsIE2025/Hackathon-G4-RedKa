services:
  # Zookeeper (Requerido por Kafka)
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  # Kafka (Broker de Mensajes)
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  # Redis (Almacén temporal y control de duplicados)
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  # Interfaz Web para Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis

  # Publisher (Microservicio de publicación)
  publisher:
    build: ./publisher
    container_name: publisher
    restart: always
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    ports:
      - "8000:8000"

  # Subscriber 1
  subscriber1:
    build: ./subscriber1
    container_name: subscriber1
    restart: always
    depends_on:
      - kafka
      - redis
    environment:
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
      - SUBSCRIBER_ID=subscriber1
    ports:
      - "8001:8001"  # Exponemos este puerto para consultas GET

  # Subscriber 2
  subscriber2:
    build: ./subscriber1
    container_name: subscriber2
    restart: always
    depends_on:
      - kafka
      - redis
    environment:
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
      - SUBSCRIBER_ID=subscriber2
    ports:
      - "8002:8001"  # Segundo subscriber en un puerto diferente

networks:
  default:
    driver: bridge
